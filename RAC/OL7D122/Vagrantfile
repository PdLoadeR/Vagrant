# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
VAGRANTFILE_API_VERSION = "2"

# You might need this in the session.
# export SSH_AUTH_SOCK=""

# Variables
params = YAML.load_file 'config/vagrant.yml'
var_box                     = params['shared']['box']
var_non_rotational          = params['shared']['non_rotational']
var_software_folder         = params['shared']['software_folder']
var_domain_name             = params['shared']['domain_name']  
var_cluster_name            = params['shared']['cluster_name']
var_cluster_node_count      = params['shared']['cluster_node_count']
var_public_subnet           = params['shared']['public_subnet']
var_private_subnet          = params['shared']['private_subnet']
var_dns_ip_address          = params['shared']['dns_ip_address']
var_cluster_ip_start        = params['shared']['cluster_ip_start']
var_listener_port_start     = params['shared']['listener_port_start']
var_em_port_start           = params['shared']['em_port_start']
var_host_only_adapter_name  = params['shared']['host_only_adapter_name']

# ASM Info
var_sata_controller_name    = params['shared']['sata_controller_name']
var_shared_disk_folder      = params['shared']['shared_disk_folder']
var_u01_size_GB             = params['shared']['u01_size_GB']
var_ASM_DATA_filename       = params['shared']['ASM_DATA_filename']
var_ASM_DATA_disk_count     = params['shared']['ASM_DATA_disk_count']
var_ASM_DATA_disk_size_GB   = params['shared']['ASM_DATA_disk_size_GB']
var_ASM_FRA_filename        = params['shared']['ASM_FRA_filename']
var_ASM_FRA_disk_count      = params['shared']['ASM_FRA_disk_count']
var_ASM_FRA_disk_size_GB    = params['shared']['ASM_FRA_disk_size_GB']

# DNS
var_dns_mem_size            = params['dns']['mem_size']
var_dns_cpu                 = params['dns']['cpus']

# Nodes
var_node_mem_size           = params['nodes']['mem_size']
var_node_cpu                = params['nodes']['cpus']

####### Vagrant File Configuration
## Create the array of nodes and each node's configuration
rac_nodes = []
private_subnet_ip=var_private_subnet.split('.')[0,3].join('.') 
public_subnet_ip=var_cluster_ip_start.split('.')[0,3].join('.') 
host_ip=var_cluster_ip_start.split('.')[3,4].join('.') #100
scan_first_ip = 0

(1..var_cluster_node_count.to_i).each do |node_num|
	rac_nodes << {
	    :hostname => var_cluster_name+"#{node_num}".rjust(2,'0'), 
	    :public_ip => "#{public_subnet_ip}.#{host_ip.to_i+node_num}", 
	    :private_ip => "#{private_subnet_ip}.#{host_ip.to_i+node_num}", 
	    :virtual_ip => "#{public_subnet_ip}.#{host_ip.to_i+var_cluster_node_count.to_i+node_num}", 
	    :listener_port => "#{var_listener_port_start.to_i+node_num}", 
	    :em_port => "#{var_em_port_start.to_i+node_num}"
	}
	scan_first_ip = host_ip.to_i+var_cluster_node_count.to_i+node_num
end

## Create an array for scan ports
scan_ports = []
(1..3).each do |n|
    scan_ports << {
        :port => "#{public_subnet_ip}.#{scan_first_ip.to_i+n}"
    }
end

## Disks
disk_port = 0
# local disks
local_disks = []
local_disks << {
	:disk_path => "#{var_shared_disk_folder}", :disk_size => var_u01_size_GB, :port => disk_port+=1
}

# ASM Data Disks
asm_data_disks = []
(1..var_ASM_DATA_disk_count).each do |n|
    disk_port += 1
    asm_data_disks << {
        :asm_data_disk_path => "#{var_shared_disk_folder}\\#{var_cluster_name}\\#{var_ASM_DATA_filename}"+"#{n}".rjust(2,'0')+".vdi",
		:asm_data_disk_size => var_ASM_DATA_disk_size_GB,
		:port => disk_port
    }
end
# ASM Fra Disks
asm_fra_disks = []
(1..var_ASM_FRA_disk_count).each do |n|
    disk_port += 1
    asm_fra_disks << {
        :asm_fra_disk_path => "#{var_shared_disk_folder}\\#{var_cluster_name}\\#{var_ASM_FRA_filename}"+"#{n}".rjust(2,'0')+".vdi",
		:asm_fra_disk_size => var_ASM_FRA_disk_size_GB,
		:port => disk_port
    }
end

# Print information of the members of the cluster
puts "----------------------------------------- CLUSTER MEMBERS ------------------------------------------"
puts "  Hostname  :   Public IP    :    Private IP    :    Virtual IP    :  Listener Port  :  EM Port  "
puts "----------------------------------------------------------------------------------------------------"
rac_nodes.each { |n| puts "#{n[:hostname]} : #{n[:public_ip]} : #{n[:private_ip]} : #{n[:virtual_ip]} : #{n[:listener_port]} : #{n[:em_port]}" }
#puts "-----------------------------------------  FILES  -------------------------------------------------"
#local_disks.each { |n| puts "#{n[:disk_path]} : #{n[:disk_size]} : #{n[:port]} " }
#asm_data_disks.each { |n| puts "#{n[:asm_data_disk_path]} : #{n[:asm_data_disk_size]} : #{n[:port]} " }
#asm_fra_disks.each { |n| puts "#{n[:asm_fra_disk_path]} : #{n[:asm_fra_disk_size]} : #{n[:port]} " }

# Generate host_base and host_scan files that contain the information needed to be imported on each node's /etc/hosts file
file = File.open("./shared/files/hosts_base", "w")
file.puts "## This file is auto generated on each run"
file.puts "# Public"
rac_nodes.each { |n| file.puts "#{n[:public_ip]} #{n[:hostname]}.#{var_domain_name} #{n[:hostname]} " }
file.puts "# Private"
rac_nodes.each { |n| file.puts "#{n[:private_ip]} #{n[:hostname]}-priv.#{var_domain_name} #{n[:hostname]}-priv " }
file.puts "# Virtual"
rac_nodes.each { |n| file.puts "#{n[:virtual_ip]} #{n[:hostname]}-vip.#{var_domain_name} #{n[:hostname]}-vip " }
file.close

file = File.open("./shared/files/hosts_scan", "w")
file.puts "## This file is auto generated on each run"
file.puts "--------------- SCAN PORTS ----------------"
scan_ports.each { |n| file.puts "#{n[:port]} #{var_cluster_name}-scan.#{var_domain_name} #{var_cluster_name}-scan " }
file.close

file = File.open("./shared/files/resolv", "w")
file.puts "## This file is auto generated on each run"
file.puts "search localdomain"
file.puts "nameserver #{var_dns_ip_address}"
file.close

# Generate passwordless ssh final scripts
file = File.open("./shared/files/passwordlesssssh_finalize.sh", "w")
file.puts "## This file is auto generated on each run"
rac_nodes.each { |n| file.puts "sshpass -f /tmp/temp1.txt ssh -o StrictHostKeyChecking=no root@#{n[:hostname]} 'sh /vagrant/shared/scripts/shared_config_passwordless_ssh_finalize.sh' " }
file.close

### DNS
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
	### DNS
	config.vm.define var_cluster_name + "DNS" do |dns|
		dns.vm.box = var_box
		dns.vm.provider "virtualbox" do |vb, override|
			override.vm.network "private_network", ip: var_dns_ip_address, name: var_host_only_adapter_name
			override.vm.hostname = var_cluster_name + "DNS" + "." + var_domain_name
			vb.name = var_cluster_name + "DNS"
			vb.customize [
				"modifyvm", :id, 
				"--memory", var_dns_mem_size, 
				"--cpus", var_dns_cpu, 
				"--groups", "/#{var_cluster_name}"
			]
			vb.customize [
				"storageattach", :id, 
				"--storagectl", var_sata_controller_name, 
				"--port", "0", 
				"--nonrotational", var_non_rotational
			]
		end # end provider
		dns.vm.provision "shell", inline: <<-SHELL
			sh /vagrant/shared/scripts/1.DNSSetup.sh
		SHELL
	end # end DNS
	
	### Nodes
	(1..var_cluster_node_count).each do |node_num|
		node_name = var_cluster_name+"#{node_num}".rjust(2,'0')
		config.vm.define node_name do |node_config|
			node_config.vm.synced_folder var_software_folder, "/stage/df_Database"
			node_config.vm.box = var_box
			node_config.vm.network "forwarded_port", guest: 1521, host: var_listener_port_start.to_i+node_num
			node_config.vm.network "forwarded_port", guest: 5500, host: var_em_port_start.to_i+node_num
			node_config.vm.network "private_network", ip: "#{public_subnet_ip}.#{host_ip.to_i+node_num}", name: var_host_only_adapter_name
			node_config.vm.network "private_network", ip: "#{private_subnet_ip}.#{host_ip.to_i+node_num}", virtualbox__intnet: "private"
			node_config.vm.hostname = node_name + "." + var_domain_name
			
			# Do Virtualbox configuration 
			node_config.vm.provider :virtualbox do |vb|
				
				# Change RAC node specific settings 
				vb.name = node_name
				vb.customize [
					"modifyvm", :id, 
					"--memory", var_node_mem_size, 
					"--cpus", var_node_cpu, 
					"--groups", "/#{var_cluster_name}"
				]

				# Increase SATA port count for ASM Disks + extra 5
				vb.customize ['storagectl', :id, '--name', var_sata_controller_name, '--portcount', var_ASM_DATA_disk_count + var_ASM_FRA_disk_count + 5 ]   
				
				# Add /u01 disk at the begining so it becomes /dev/sdb1
				var_u01_disk = var_shared_disk_folder +"\\" + var_cluster_name + "\\" + node_name + "_u01.vdi"
				unless File.exist?(var_u01_disk)
				  vb.customize ['createhd', '--filename', var_u01_disk, '--size', var_u01_size_GB * 1024]
				end
				vb.customize ['storageattach', :id, '--storagectl', var_sata_controller_name, '--port', 1, '--device', 0, '--type', 'hdd', '--medium', var_u01_disk, '--nonrotational', var_non_rotational]
				
				# Add ASM Data Disks
				(1..var_ASM_DATA_disk_count).each do |disk|
					if ARGV[0] == "up" && ! File.exist?(var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_DATA_filename + "#{disk}".rjust(2,'0') + ".vdi")
						if node_num == 1
							vb.customize ['createhd',
										'--filename', var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_DATA_filename + "#{disk}".rjust(2,'0') + ".vdi",
										'--format', 'VDI',
										'--variant', 'Fixed',
										'--size', var_ASM_DATA_disk_size_GB * 1024]
							vb.customize ['modifyhd',
										 var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_DATA_filename + "#{disk}".rjust(2,'0') + ".vdi",
										'--type', 'shareable']
						end # End createmedium on rac1

						vb.customize ['storageattach', :id,
								'--storagectl', var_sata_controller_name,
								'--port', "#{disk+1}",
								'--device', 0,
								'--type', 'hdd',
								'--medium', var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_DATA_filename + "#{disk}".rjust(2,'0') + ".vdi",
								'--nonrotational', 'on']
					end  # End if exist
				end    # End of EACH iterator for disks  
				
				# Add ASM FRA Disks
				(1..var_ASM_FRA_disk_count).each do |disk|
					if ARGV[0] == "up" && ! File.exist?(var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_FRA_filename + "#{disk}".rjust(2,'0') + ".vdi")
						if node_num == 1
							vb.customize ['createhd',
										'--filename', var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_FRA_filename + "#{disk}".rjust(2,'0') + ".vdi",
										'--format', 'VDI',
										'--variant', 'Fixed',
										'--size', var_ASM_FRA_disk_size_GB * 1024]
							vb.customize ['modifyhd',
										 var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_FRA_filename + "#{disk}".rjust(2,'0') + ".vdi",
										'--type', 'shareable']
						end # End createmedium on rac1

						vb.customize ['storageattach', :id,
								'--storagectl', var_sata_controller_name,
								'--port', "#{disk+1+var_ASM_DATA_disk_count}",
								'--device', 0,
								'--type', 'hdd',
								'--medium', var_shared_disk_folder +"\\" + var_cluster_name + "\\" + var_ASM_FRA_filename + "#{disk}".rjust(2,'0') + ".vdi",
								'--nonrotational', 'on']
					end  # End if exist
				end    # End of EACH iterator for disks  
				
			end      # End of config.vm.provider
			
			node_config.vm.provision "shell", inline: <<-SHELL
				sh /vagrant/shared/scripts/2.NodesSetup.sh
			SHELL

	
			# run only after last node is created
			if node_num == var_cluster_node_count
			  node_config.vm.provision "shell", inline: <<-SHELL
				sh /vagrant/shared/files/passwordlesssssh_finalize.sh
			  SHELL
			end
			
			#if node_num == var_cluster_node_count
			#	(1..var_cluster_node_count).each do |node_num|
			#		node_name = var_cluster_name+"#{node_num}".rjust(2,'0')					
			#		node_config.vm.provision "shell" do |s|
			#		  s.inline = "sshpass -f /tmp/temp1.txt ssh user@${node_name} 'sh /vagrant/shared/scripts/shared_config_passwordless_ssh_finalize.sh'"
			#		  s.args   = node_name
			#		end						
			#	end
			#end
			
			# Create disk partitions   
			#if node_num ==  1
			#	config.vm.provision "shell", inline: <<-SHELL
			#	if [ -f /etc/SFDISK_CREATE_DATE ]; then
			#	 echo "Partition creation already done."
			#	  exit 0
			#	fi
			#	for i in `ls /dev/sd* | grep -v sda`;  do echo \\; | sudo sfdisk -q $i; done
			#	date > /etc/SFDISK_CREATE_DATE
			#	SHELL
			#end # End create disk partions
			
			#if node_num == var_cluster_node_count
			#	# Start Ansible provisioning
			#	config.vm.provision "ansible" do |ansible|
			#		#ansible.verbose = "-v"
			#		ansible.limit = "all"
			#		ansible.playbook = "ansible/rac_gi_db.yml"
			#	end # End of Ansible provisioning
			#end
		
	
		end # node config
	end # loop iteration
	
	# removing all the config files before destroying so that ssh keys and network info are fresh everytime
	config.trigger.before :destroy do |trigger|
		trigger.warn = "Removing all the files in /vagrant/shared/files/*"
		trigger.run_remote = {inline: "rm -rf /vagrant/shared/files/*"}
	end
	
end




	
	